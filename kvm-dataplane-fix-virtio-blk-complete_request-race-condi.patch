From 3c3aa62fb2295a92e0cc51a266eb1c534545bf9f Mon Sep 17 00:00:00 2001
From: Stefan Hajnoczi <stefanha@redhat.com>
Date: Fri, 30 Sep 2016 10:46:44 +0200
Subject: [PATCH 6/6] dataplane: fix virtio-blk complete_request() race
 condition

RH-Author: Stefan Hajnoczi <stefanha@redhat.com>
Message-id: <1475232404-16336-2-git-send-email-stefanha@redhat.com>
Patchwork-id: 72449
O-Subject: [RHEV-7.2.z qemu-kvm-rhev PATCH 1/1] dataplane: fix virtio-blk complete_request() race condition
Bugzilla: 1380320
RH-Acked-by: Paolo Bonzini <pbonzini@redhat.com>
RH-Acked-by: Kevin Wolf <kwolf@redhat.com>
RH-Acked-by: Fam Zheng <famz@redhat.com>

Commit b002254dbd4c19a01f29790f840f983803e26893 ("virtio-blk: Unify
{non-,}dataplane's request handlings") introduced a request completion
callback that is invoked by both dataplane and non-dataplane code paths.
The old complete_request() pointer is saved when dataplane starts and
restored when it stops.

There is a race condition when dataplane stops because the old
complete_request() pointer is restored with dataplane requests still in
flight.  The requests attempt to complete using the non-dataplane code
path and this result in virtqueue state corruption.

The symptom is a "Virtqueue size exceeded" error on the source QEMU
during live migration.  The race condition can be triggered sometimes by
running an I/O intensive workload when the "migrate" monitor command is
issued.

Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
Signed-off-by: Miroslav Rezanina <mrezanin@redhat.com>
---
 hw/block/dataplane/virtio-blk.c | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/hw/block/dataplane/virtio-blk.c b/hw/block/dataplane/virtio-blk.c
index 5419f1c..07279d5 100644
--- a/hw/block/dataplane/virtio-blk.c
+++ b/hw/block/dataplane/virtio-blk.c
@@ -314,7 +314,6 @@ void virtio_blk_data_plane_stop(VirtIOBlockDataPlane *s)
         return;
     }
     s->stopping = true;
-    vblk->complete_request = s->saved_complete_request;
     trace_virtio_blk_data_plane_stop(s);
 
     aio_context_acquire(s->ctx);
@@ -323,7 +322,11 @@ void virtio_blk_data_plane_stop(VirtIOBlockDataPlane *s)
     aio_set_event_notifier(s->ctx, &s->host_notifier, AIO_CLIENT_DATAPLANE,
                            NULL);
 
-    /* Drain and switch bs back to the QEMU main loop */
+    /* Restore completion callback after draining requests */
+    blk_drain_all();
+    vblk->complete_request = s->saved_complete_request;
+
+    /* Switch bs back to the QEMU main loop */
     blk_set_aio_context(s->conf->conf.blk, qemu_get_aio_context());
 
     aio_context_release(s->ctx);
-- 
1.8.3.1

